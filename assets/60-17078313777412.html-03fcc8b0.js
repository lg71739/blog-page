const t=JSON.parse('{"key":"v-bf746478","path":"/tools/git/10/60-17078313777412.html","title":"Git贮存","lang":"zh-CN","frontmatter":{"title":"Git贮存","date":"2021-05-20T00:00:00.000Z","order":60,"permalink":"/tools/git/10/60-17078313777412.html","description":"有时，当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态，而这时你想要切换到另一个分支做一点别的事情。 问题是，你不想仅仅因为过会儿回到这一点而为做了一半的工作创建一次提交。针对这个问题的答案是git stash命令 git stash #命令会将未完成的修改保存到一个栈上，而你可以在任何时候重新应用这些改动(git stash apply) git stash list #查看存储 git stash apply stash@{2} #如果不指定一个储藏，Git认为指定的是最近的储藏 git stash pop #来应用储藏然后立即从栈上扔掉它 git stash drop #加上将要移除的储藏的名字来移除它","head":[["meta",{"property":"og:url","content":"https://notes.819000.xyz/tools/git/10/60-17078313777412.html"}],["meta",{"property":"og:site_name","content":"个人笔记"}],["meta",{"property":"og:title","content":"Git贮存"}],["meta",{"property":"og:description","content":"有时，当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态，而这时你想要切换到另一个分支做一点别的事情。 问题是，你不想仅仅因为过会儿回到这一点而为做了一半的工作创建一次提交。针对这个问题的答案是git stash命令 git stash #命令会将未完成的修改保存到一个栈上，而你可以在任何时候重新应用这些改动(git stash apply) git stash list #查看存储 git stash apply stash@{2} #如果不指定一个储藏，Git认为指定的是最近的储藏 git stash pop #来应用储藏然后立即从栈上扔掉它 git stash drop #加上将要移除的储藏的名字来移除它"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-14T04:14:48.000Z"}],["meta",{"property":"article:author","content":"李广妮"}],["meta",{"property":"article:published_time","content":"2021-05-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-02-14T04:14:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git贮存\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-05-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-02-14T04:14:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李广妮\\",\\"url\\":\\"https://notes.819000.xyz\\"}]}"]]},"headers":[],"git":{"createdTime":1707884088000,"updatedTime":1707884088000,"contributors":[{"name":"liguangni","email":"liguangfenglucky@163.com","commits":1}]},"readingTime":{"minutes":0.75,"words":225},"filePathRelative":"tools/git/10.Git入门/60.Git贮存.md","localizedDate":"2021年5月20日","excerpt":"<p>有时，当你在项目的一部分上已经工作一段时间后，所有东西都进入了混乱的状态，而这时你想要切换到另一个分支做一点别的事情。  问题是，你不想仅仅因为过会儿回到这一点而为做了一半的工作创建一次提交。针对这个问题的答案是<code>git stash</code>命令</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token function\\">git</span> stash  <span class=\\"token comment\\">#命令会将未完成的修改保存到一个栈上，而你可以在任何时候重新应用这些改动(git stash apply) </span>\\n<span class=\\"token function\\">git</span> stash list  <span class=\\"token comment\\">#查看存储</span>\\n<span class=\\"token function\\">git</span> stash apply stash@<span class=\\"token punctuation\\">{</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">}</span>  <span class=\\"token comment\\">#如果不指定一个储藏，Git认为指定的是最近的储藏</span>\\n<span class=\\"token function\\">git</span> stash pop  <span class=\\"token comment\\">#来应用储藏然后立即从栈上扔掉它</span>\\n<span class=\\"token function\\">git</span> stash drop  <span class=\\"token comment\\">#加上将要移除的储藏的名字来移除它</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
