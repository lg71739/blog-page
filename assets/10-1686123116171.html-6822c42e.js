const e=JSON.parse('{"key":"v-74f3825c","path":"/middle/mq/rabbitmq/10-1686123116171.html","title":"RabbitMQ简介","lang":"zh-CN","frontmatter":{"title":"RabbitMQ简介","order":10,"date":"2023-06-07T00:00:00.000Z","permalink":"/middle/mq/rabbitmq/10-1686123116171.html","description":"RabbitMQ简介 什么是MQ MQ(message queue)，从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务。 MQ的作用和劣势 流量消峰 举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。","head":[["meta",{"property":"og:url","content":"https://notes.819000.xyz/middle/mq/rabbitmq/10-1686123116171.html"}],["meta",{"property":"og:site_name","content":"个人笔记"}],["meta",{"property":"og:title","content":"RabbitMQ简介"}],["meta",{"property":"og:description","content":"RabbitMQ简介 什么是MQ MQ(message queue)，从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务。 MQ的作用和劣势 流量消峰 举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-15T10:04:01.000Z"}],["meta",{"property":"article:author","content":"李广妮"}],["meta",{"property":"article:published_time","content":"2023-06-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-15T10:04:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RabbitMQ简介\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-15T10:04:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李广妮\\",\\"url\\":\\"https://notes.819000.xyz\\"}]}"]]},"headers":[{"level":2,"title":"什么是MQ","slug":"什么是mq","link":"#什么是mq","children":[]},{"level":2,"title":"MQ的作用和劣势","slug":"mq的作用和劣势","link":"#mq的作用和劣势","children":[{"level":3,"title":"流量消峰","slug":"流量消峰","link":"#流量消峰","children":[]},{"level":3,"title":"应用解耦","slug":"应用解耦","link":"#应用解耦","children":[]},{"level":3,"title":"异步处理","slug":"异步处理","link":"#异步处理","children":[]},{"level":3,"title":"MQ的劣势","slug":"mq的劣势","link":"#mq的劣势","children":[]}]},{"level":2,"title":"主流MQ的对比与选择","slug":"主流mq的对比与选择","link":"#主流mq的对比与选择","children":[{"level":3,"title":"主流MQ的对比","slug":"主流mq的对比","link":"#主流mq的对比","children":[]}]}],"git":{"createdTime":1686823441000,"updatedTime":1686823441000,"contributors":[{"name":"liguangni","email":"liguangfenglucky@163.com","commits":1}]},"readingTime":{"minutes":8.84,"words":2653},"filePathRelative":"middle/mq/rabbitmq/10.RabbitMQ简介.md","localizedDate":"2023年6月7日","excerpt":"<h1> RabbitMQ简介</h1>\\n<h2> 什么是MQ</h2>\\n<p>MQ(message queue)，从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务。</p>\\n<h2> MQ的作用和劣势</h2>\\n<h3> 流量消峰</h3>\\n<p>举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</p>","autoDesc":true}');export{e as data};
