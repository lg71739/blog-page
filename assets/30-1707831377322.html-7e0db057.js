import{_ as a,o as i,c as e,f as t}from"./app-a55ff2b5.js";const n={},s=t(`<h1 id="git分支操作" tabindex="-1"><a class="header-anchor" href="#git分支操作" aria-hidden="true">#</a> Git分支操作</h1><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_17_53_202402132217180.png" alt="image-20210917213616760" tabindex="0" loading="lazy"><figcaption>image-20210917213616760</figcaption></figure><h2 id="什么是分支" tabindex="-1"><a class="header-anchor" href="#什么是分支" aria-hidden="true">#</a> 什么是分支</h2><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本（分支底层其实也是指针的引用）</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_18_3_202402132218620.png" alt="image-20210917213935209" tabindex="0" loading="lazy"><figcaption>image-20210917213935209</figcaption></figure><h2 id="分支的好处" tabindex="-1"><a class="header-anchor" href="#分支的好处" aria-hidden="true">#</a> 分支的好处</h2><p>同时并行推进多个功能开发，<strong>提高开发效率</strong></p><p>各个分支在开发过程中，如果某一个分支开发失败，<strong>不会对其他分支有任何影响</strong>。失败的分支删除重新开始即可</p><h2 id="分支的操作" tabindex="-1"><a class="header-anchor" href="#分支的操作" aria-hidden="true">#</a> 分支的操作</h2><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;"><code>git branch 分支名</code></td><td style="text-align:left;">创建分支</td></tr><tr><td style="text-align:left;"><code>git branch -v</code></td><td style="text-align:left;">查看分支</td></tr><tr><td style="text-align:left;"><code>git checkout</code> 分支名</td><td style="text-align:left;">切换分支</td></tr><tr><td style="text-align:left;"><code>git merge</code> 分支名</td><td style="text-align:left;">把指定的分支合并到当前分支</td></tr></tbody></table><h3 id="创建分支、查看分支" tabindex="-1"><a class="header-anchor" href="#创建分支、查看分支" aria-hidden="true">#</a> 创建分支、查看分支</h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch 分支名
<span class="token function">git</span> branch <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2）案例实操</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_18_43_202402132218042.png" alt="image-20210917214653546" tabindex="0" loading="lazy"><figcaption>image-20210917214653546</figcaption></figure><h3 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支" aria-hidden="true">#</a> 切换分支</h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout 分支名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）案例实操</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_18_51_202402132218909.png" alt="image-20210917215246415" tabindex="0" loading="lazy"><figcaption>image-20210917215246415</figcaption></figure><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支</h3><p>1）基本语法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> merge 分支名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2）案例实操</p><h4 id="正常合并" tabindex="-1"><a class="header-anchor" href="#正常合并" aria-hidden="true">#</a> <strong>正常合并</strong></h4><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_18_59_202402132218112.png" alt="image-20210917215908842" tabindex="0" loading="lazy"><figcaption>image-20210917215908842</figcaption></figure><h4 id="冲突合并" tabindex="-1"><a class="header-anchor" href="#冲突合并" aria-hidden="true">#</a> <strong>冲突合并</strong></h4><p>冲突产生的原因：合并分支时，两个分支在同一个文件的同一个位置有两套完全不同的修改。Git无法替我们决定使用哪一个。必须人为决定新代码内容</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_19_6_202402132219368.png" alt="image-20210917220923478" tabindex="0" loading="lazy"><figcaption>image-20210917220923478</figcaption></figure><p>解决冲突</p><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_19_17_202402132219280.png" alt="image-20210917221121233" tabindex="0" loading="lazy"><figcaption>image-20210917221121233</figcaption></figure><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_19_47_202402132219815.png" alt="image-20210917221239011" tabindex="0" loading="lazy"><figcaption>image-20210917221239011</figcaption></figure><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_19_57_202402132219909.png" alt="image-20210917222018377" tabindex="0" loading="lazy"><figcaption>image-20210917222018377</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">提示</p><p>新版本git中新增了merge默认选项<code>strategy=&quot;ort&quot;</code>，对于相同文件的不同行的修改已经可以实现自动合并了。</p><p>只有在相同行都做了修改时，才会出现合并冲突。</p></div><h2 id="创建分支和切换分支图解" tabindex="-1"><a class="header-anchor" href="#创建分支和切换分支图解" aria-hidden="true">#</a> 创建分支和切换分支图解</h2><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_20_6_202402132220214.png" alt="image-20210917221451896" tabindex="0" loading="lazy"><figcaption>image-20210917221451896</figcaption></figure><figure><img src="https://jihulab.com/byzh123/images/-/raw/images/pictures/2024/02/13_22_20_15_202402132220033.png" alt="image-20210917221515718" tabindex="0" loading="lazy"><figcaption>image-20210917221515718</figcaption></figure><p>master、hot-fix 其实都是指向具体版本记录的指针。</p><p>当前所在的分支，其实是由 HEAD 决定的。所以创建分支的本质就是多创建一个指针</p><ul><li>HEAD 如果指向 master，那么我们现在就在 master 分支上</li><li>HEAD 如果指向 hotfix，那么我们现在就在 hotfix 分支上</li></ul><p>所以切换分支的本质就是移动HEAD指针</p>`,41),r=[s];function g(d,c){return i(),e("div",null,r)}const h=a(n,[["render",g],["__file","30-1707831377322.html.vue"]]);export{h as default};
